{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","React","createElement","onClick","addToCartAPI","App","Fragment","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yLAceA,QAJF,SAAAC,GAAK,OACjBC,IAAAC,cAAA,UAAQC,QAAS,kBAAMH,EAAMI,iBAAgB,iBCsF/BC,EAlBH,WAMV,OACEJ,IAAAC,cAACD,IAAMK,SAAQ,KACbL,IAAAC,cAAA,WAAK,QAGLD,IAAAC,cAACH,EAAI,CAACK,aATW,WACnBG,QAAQC,IAAI,sBCtEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOd,IAAAC,cAACG,EAAG,MAAKW,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d58b29f8.chunk.js","sourcesContent":["import React from 'react';\n\n// const Form = props => (\n// \t<form onSubmit={props.getWeather}>\n// \t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\n// \t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>  \n// \t\t<button>Get Weather</button>\n// \t</form>\n// );\n\nconst Form = props => (\n\t<button onClick={() => props.addToCartAPI()}>Add to cart</button>\n);\n\nexport default Form;","//  import React from 'react';\n// import Titles from './components/Titles'\n// import Form from './components/Form'\n// import Weather from './components/Weather'\n \n//  const API_KEY =\"052c4b1b14432e85da659cf29b212ed8\";\n\n//  class App extends React.Component {\n//   state = {\n//     temperature: undefined,\n//     city: undefined,\n//     country: undefined,\n//     humidity: undefined,\n//     description: undefined,\n//     error: undefined\n//   }\n//   getWeather = async (e) => {\n//     e.preventDefault();\n//     const city= e.target.elements.city.value;\n//     const country= e.target.elements.country.value;\n//     const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);  \n//     const data = await api_call.json();\n//     if (city && country) {\n//       this.setState({\n//       temperature: data.main.temp,\n//       city: data.name,\n//       country: data.sys.country,\n//       humidity: data.main.humidity,\n//       description: data.weather[0].description,\n//       error: \"\"\n//     })\n//     }\n//     else\n//     {\n//       this.setState({\n//       temperature: undefined,\n//       city: undefined,\n//       country: undefined,\n//       humidity: undefined,\n//       description: undefined,\n//       error: \"Please enter the value\"\n//     })\n//     }\n    \n//   }\n\n//   render(){\n//     return(  \n//       <div>\n//         <div className=\"wrapper\">\n//           <div className=\"main\">\n//             <div className=\"container\">\n//               <div className=\"row\">\n//                 <div className=\"col-md-5 title-container\">\n//                   <Titles />\n//                 </div>\n//                 <div className=\"col-md-7 form-container\">\n//                   <Form getWeather={this.getWeather}/>\n//                   <Weather \n//                     temperature={this.state.temperature}\n//                     city={this.state.city}\n//                     country={this.state.country}\n//                     humidity={this.state.humidity}\n//                     description={this.state.description}\n//                     error={this.state.error}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     ); \n//   }\n//  }\n\nimport React from 'react';\nimport Form from './components/Form'\n\nconst App = () => {\n\n  const addToCartAPI = () => {\n    console.log(\"API is called\");\n  }\n\n  return (\n    <React.Fragment>\n      <div>\n        Helo\n      </div>\n      <Form addToCartAPI={addToCartAPI} />\n    </React.Fragment>\n    \n\n  )\n}\n\nexport default App;\n\n       ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}